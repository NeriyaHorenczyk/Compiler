//add
@SP
A=M-1
D=M
A=A-1
M=D+M
@SP
M=M-1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//neg
@SP
A=M-1
M=-M
//or
@SP
A=M-1
D=M
A=A-1
M=D|M
@SP
M=M-1
//and
@SP
A=M-1
D=M
A=A-1
M=D&M
@SP
M=M-1
//not
@SP
A=M-1
M=!M
//eq
@SP
A=M-1
D=M
A=A-1
D=D-M
@EQ_0
D;JEQ
@SP
A=M-1
A=A-1
M=0
@END_EQ_0
0;JMP
(EQ_0)
@SP
A=M-1
A=A-1
M=-1
(END_EQ_0)
@SP
M=M-1
//gt
@SP
A=M-1
D=M
A=A-1
D=M-D
@GT_0
D;JGT
@SP
A=M-1
A=A-1
M=0
@END_GT_0
0;JMP
(GT_0)
@SP
A=M-1
A=A-1
M=-1
(END_GT_0)
@SP
M=M-1
//lt
@SP
A=M-1
D=M
A=A-1
D=D-M
@LT_0
D;JGT
@SP
A=M-1
A=A-1
M=0
@END_LT_0
0;JMP
(LT_0)
@SP
A=M-1
A=A-1
M=-1
(END_LT_0)
@SP
M=M-1
//push local 5
@5
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 5
@5
D=A
@LCL
D=D+M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
//push argument 5
@5
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 5
@5
D=A
@ARG
D=D+M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
//push this 5
@5
D=A
@THIS
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 5
@5
D=A
@THIS
D=D+M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
//push that 5
@5
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 5
@5
D=A
@THAT
D=D+M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
//push temp 5
@5
D=A
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 5
@5
D=A
@5
D=D+A
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
//push pointer 0
@3
D=M
@SP
A=M-1
M=D
@SP
M=M+1
//pop pointer 0
@SP
A=M-1
D=M
@3
M=D
@SP
M=M-1
//push pointer 1
@4
D=M
@SP
A=M-1
M=D
@SP
M=M+1
//pop pointer 1
@SP
A=M-1
D=M
@4
M=D
@SP
M=M-1
//pop static 5
@SP
A=M-1
D=M
@input.5
M=D
@SP
M=M-1
//push static 5
@input.5
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
