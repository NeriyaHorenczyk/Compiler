function Board.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 80
call Array.new 1
pop this 0
push constant 4
call Array.new 1
pop this 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 80
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Board.placePiece 2
push argument 0
pop pointer 0
push constant 7
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
push local 0
push constant 0
eq
or
not
if-goto WHILE_END0
push local 0
push constant 10
call Math.multiply 2
push argument 1
add
pop local 1
push local 1
push this 0
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push this 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 2
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push argument 1
call Graphics.Print_Piece_Type_One 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push argument 1
call Graphics.Print_Piece_Type_Two 2
pop temp 0
label IF_END1
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.checkWin 4
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 6
eq
push local 1
push constant 6
lt
or
not
if-goto WHILE_END1
push constant 0
pop local 2
push constant 0
not
pop local 3
label WHILE_EXP2
push local 2
push constant 4
lt
not
if-goto WHILE_END2
push local 0
push constant 10
call Math.multiply 2
push local 1
push local 2
add
add
push this 0
add
pop pointer 1
push that 0
push argument 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 3
label IF_FALSE0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP2
label WHILE_END2
push local 3
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 2
label WHILE_EXP3
push local 2
push constant 4
lt
not
if-goto WHILE_END3
push local 2
push this 1
add
push local 0
push constant 10
call Math.multiply 2
push local 1
push local 2
add
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP3
label WHILE_END3
push constant 0
not
return
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 1
label WHILE_EXP4
push local 1
push constant 10
lt
not
if-goto WHILE_END4
push constant 0
pop local 0
push constant 0
not
pop local 3
label WHILE_EXP5
push local 0
push constant 4
eq
push local 0
push constant 4
lt
or
not
if-goto WHILE_END5
push constant 0
pop local 2
label WHILE_EXP6
push local 2
push constant 4
lt
not
if-goto WHILE_END6
push local 0
push local 2
add
push constant 10
call Math.multiply 2
push local 1
add
push this 0
add
pop pointer 1
push that 0
push argument 1
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 3
label IF_FALSE2
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP6
label WHILE_END6
push local 3
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 2
label WHILE_EXP7
push local 2
push constant 4
lt
not
if-goto WHILE_END7
push local 2
push this 1
add
push local 0
push local 2
add
push constant 10
call Math.multiply 2
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP7
label WHILE_END7
push constant 0
not
return
label IF_FALSE3
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP5
label WHILE_END5
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP4
label WHILE_END4
push constant 0
pop local 0
label WHILE_EXP8
push local 0
push constant 4
lt
push local 0
push constant 4
eq
or
not
if-goto WHILE_END8
push constant 0
pop local 1
push constant 0
not
pop local 3
label WHILE_EXP9
push local 1
push constant 6
lt
push local 1
push constant 6
eq
or
not
if-goto WHILE_END9
push constant 0
pop local 2
label WHILE_EXP10
push local 2
push constant 4
lt
not
if-goto WHILE_END10
push local 0
push local 2
add
push constant 10
call Math.multiply 2
push local 1
push local 2
add
add
push this 0
add
pop pointer 1
push that 0
push argument 1
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
pop local 3
label IF_FALSE4
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP10
label WHILE_END10
push local 3
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop local 2
label WHILE_EXP11
push local 2
push constant 4
lt
not
if-goto WHILE_END11
push local 2
push this 1
add
push local 0
push local 2
add
push constant 10
call Math.multiply 2
push local 1
push local 2
add
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP11
label WHILE_END11
push constant 0
not
return
label IF_FALSE5
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP9
label WHILE_END9
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP8
label WHILE_END8
push constant 3
pop local 0
label WHILE_EXP12
push local 0
push constant 8
lt
not
if-goto WHILE_END12
push constant 0
pop local 1
push constant 0
not
pop local 3
label WHILE_EXP13
push local 1
push constant 6
lt
push local 1
push constant 6
eq
or
not
if-goto WHILE_END13
push constant 0
pop local 2
label WHILE_EXP14
push local 2
push constant 4
lt
not
if-goto WHILE_END14
push local 0
push local 2
sub
push constant 10
call Math.multiply 2
push local 1
add
push local 2
add
push this 0
add
pop pointer 1
push that 0
push argument 1
eq
not
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
pop local 3
label IF_FALSE6
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP14
label WHILE_END14
push local 3
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
pop local 2
label WHILE_EXP15
push local 2
push constant 4
lt
not
if-goto WHILE_END15
push local 2
push this 1
add
push local 0
push local 2
sub
push constant 10
call Math.multiply 2
push local 1
push local 2
add
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP15
label WHILE_END15
push constant 0
not
return
label IF_FALSE7
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP13
label WHILE_END13
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP12
label WHILE_END12
push constant 0
return
function Board.getWinningIndex 1
push argument 0
pop pointer 0
push argument 1
push this 1
add
pop pointer 1
push that 0
pop local 0
push local 0
return
